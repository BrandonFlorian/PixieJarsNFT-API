// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("tokenURI", Value.fromString(""));
    this.set("ipfsURI", Value.fromString(""));
    this.set("dna", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("description", Value.fromString(""));
    this.set("image", Value.fromString(""));
    this.set("edition", Value.fromBigInt(BigInt.zero()));
    this.set("date", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
    this.set("updatedAtTimeStamp", Value.fromBigInt(BigInt.zero()));
    this.set("background", Value.fromString(""));
    this.set("jar", Value.fromString(""));
    this.set("floor", Value.fromString(""));
    this.set("skin", Value.fromString(""));
    this.set("earrings", Value.fromString(""));
    this.set("faceAccessory", Value.fromString(""));
    this.set("outfit", Value.fromString(""));
    this.set("hair", Value.fromString(""));
    this.set("shoes", Value.fromString(""));
    this.set("eyes", Value.fromString(""));
    this.set("eyebrows", Value.fromString(""));
    this.set("lipstick", Value.fromString(""));
    this.set("jarTag", Value.fromString(""));
    this.set("companion", Value.fromString(""));
    this.set("sparkles", Value.fromString(""));
    this.set("weather", Value.fromString(""));
    this.set("glasses", Value.fromString(""));
    this.set("bracelet", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value!.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get ipfsURI(): string {
    let value = this.get("ipfsURI");
    return value!.toString();
  }

  set ipfsURI(value: string) {
    this.set("ipfsURI", Value.fromString(value));
  }

  get dna(): string {
    let value = this.get("dna");
    return value!.toString();
  }

  set dna(value: string) {
    this.set("dna", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get edition(): BigInt {
    let value = this.get("edition");
    return value!.toBigInt();
  }

  set edition(value: BigInt) {
    this.set("edition", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get updatedAtTimeStamp(): BigInt {
    let value = this.get("updatedAtTimeStamp");
    return value!.toBigInt();
  }

  set updatedAtTimeStamp(value: BigInt) {
    this.set("updatedAtTimeStamp", Value.fromBigInt(value));
  }

  get background(): string {
    let value = this.get("background");
    return value!.toString();
  }

  set background(value: string) {
    this.set("background", Value.fromString(value));
  }

  get jar(): string {
    let value = this.get("jar");
    return value!.toString();
  }

  set jar(value: string) {
    this.set("jar", Value.fromString(value));
  }

  get floor(): string {
    let value = this.get("floor");
    return value!.toString();
  }

  set floor(value: string) {
    this.set("floor", Value.fromString(value));
  }

  get skin(): string {
    let value = this.get("skin");
    return value!.toString();
  }

  set skin(value: string) {
    this.set("skin", Value.fromString(value));
  }

  get earrings(): string {
    let value = this.get("earrings");
    return value!.toString();
  }

  set earrings(value: string) {
    this.set("earrings", Value.fromString(value));
  }

  get faceAccessory(): string {
    let value = this.get("faceAccessory");
    return value!.toString();
  }

  set faceAccessory(value: string) {
    this.set("faceAccessory", Value.fromString(value));
  }

  get outfit(): string {
    let value = this.get("outfit");
    return value!.toString();
  }

  set outfit(value: string) {
    this.set("outfit", Value.fromString(value));
  }

  get hair(): string {
    let value = this.get("hair");
    return value!.toString();
  }

  set hair(value: string) {
    this.set("hair", Value.fromString(value));
  }

  get shoes(): string {
    let value = this.get("shoes");
    return value!.toString();
  }

  set shoes(value: string) {
    this.set("shoes", Value.fromString(value));
  }

  get eyes(): string {
    let value = this.get("eyes");
    return value!.toString();
  }

  set eyes(value: string) {
    this.set("eyes", Value.fromString(value));
  }

  get eyebrows(): string {
    let value = this.get("eyebrows");
    return value!.toString();
  }

  set eyebrows(value: string) {
    this.set("eyebrows", Value.fromString(value));
  }

  get lipstick(): string {
    let value = this.get("lipstick");
    return value!.toString();
  }

  set lipstick(value: string) {
    this.set("lipstick", Value.fromString(value));
  }

  get jarTag(): string {
    let value = this.get("jarTag");
    return value!.toString();
  }

  set jarTag(value: string) {
    this.set("jarTag", Value.fromString(value));
  }

  get companion(): string {
    let value = this.get("companion");
    return value!.toString();
  }

  set companion(value: string) {
    this.set("companion", Value.fromString(value));
  }

  get sparkles(): string {
    let value = this.get("sparkles");
    return value!.toString();
  }

  set sparkles(value: string) {
    this.set("sparkles", Value.fromString(value));
  }

  get weather(): string {
    let value = this.get("weather");
    return value!.toString();
  }

  set weather(value: string) {
    this.set("weather", Value.fromString(value));
  }

  get glasses(): string {
    let value = this.get("glasses");
    return value!.toString();
  }

  set glasses(value: string) {
    this.set("glasses", Value.fromString(value));
  }

  get bracelet(): string {
    let value = this.get("bracelet");
    return value!.toString();
  }

  set bracelet(value: string) {
    this.set("bracelet", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}
